plugins {
  id 'nf-azure'
}

defaultImage="jeantristanb/confluence"
rImage="quay.io/h3abionet_org/py3rproject"

swarmPort = '2376'
queue = 'batch'

manifest {
    homePage = 'https://github.com/jeantristanb/confluence'
    mainScript = 'main.nf'
}

aws {
    accessKey =''
    secretKey =''
    region    ='eu-west-1'
}

cloud {
    imageId = "ami-710b9108"      // specify your AMI id here
    instanceType = "m4.xlarge"
    subnetId = "null"
    sharedStorageId   = "null"
    sharedStorageMount = "/mnt/shared"
    bootStorageSize = "20GB"     // Size of disk for images spawned
    //   instanceStorageMount = ""   // Set a common mount point for images
    //   instanceStorageDevice = ""  // Set a common block device for images
    autoscale {
        enabled = true
        maxInstances = 1
        terminateWhenIdle = true
    }

}


params {

    // Directories
    work_dir                = "/$PWD"
    input_dir               = ""
    scripts                 = "${params.work_dir}/scripts"

    accessKey            = ""
    secretKey            = ""
    region               = "eu-west-2"
    AMI                  = "ami-710b9108"
    instanceType         = "m4.xlarge"
    bootStorageSize      = "20GB"
    maxInstances         = "1"

    max_forks            = 95

   sumstat_head_chr =""
   sumstat_head_bp = ""
   sumstat_head_a1 =""
   sumstat_head_a2 =""
   sumstat_head_pval = ""
   sumstat_head_rs =""
   sumstat_head_freq =""
   sumstat_head_beta =""
   sumstat_head_se =""
   sumstat_head_n = ""
   sumstat_maf = 0.01
   sumstat_n = ""
   sumstat=""
   gctb_wind_mb = 1
   gctb_bayesmod = "S"
   gctb_bin = "gctb"
   gctb_hsqinit = 0.5
   output_pat = "outpat"
   output_dir = "outdir"
   model="gctb"
   gcta_justlistpos = 1
   gctb_otheroption = ""
   gctb_exclude_mhc = 0
   gctb_impute_n = 0 
   memory_gctb = 20.Gb
  /*bfile : plink file*/
   bfile=""
   cpu_plink = 2
  cpu_gctb =10
   memory_plink=10.Gb
   plink_maf = 0.01
   plink_geno = -1
   plink_hwe = -1
   gctb_keepind =""
   plink_shuffle = -1
   update_rsid = ""
   gctb_ld_bin = ""
   gctb_ld_bin_dir = ""
   gctb_ld_info_dir = ""
   gctb_ld_info = ""

} 

profiles {

    // For execution on a local machine, no containerization. -- Default
    standard {
        process.executor = 'local'
    }

   slurm {
    process.executor = 'slurm'
    process.queue = queue
  }


    // Execute pipeline with Docker locally
    docker {
        process.executor = 'local'
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
        docker.process.executor = 'local'
    }


    // Execute pipeline with Docker Swarm setup
    dockerSwarm {
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
        docker.process.executor = 'local'
        docker.engineOptions = "-H :$swarmPort"
    }
   // For execution on a PBS scheduler, no containerization.
    pbs {
        process.executor = 'pbs'
        process.queue = queue
    }


    // For execution on a PBS scheduler with containerization.
    pbsDocker {

        process.executor = 'pbs'
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
    }


    // For execution on a SLURM scheduler, no containerization.
    slurm {
        process.executor = 'slurm'
        process.queue = queue
    }


   // For execution on a PBS scheduler with containerisation.
    slurmDocker {
        process.executor = 'slurm'
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
    }


    singularity.cacheDir = "${HOME}/.singularity"

    singularity {
        singularity.autoMounts = true
        singularity.enabled = true
        process.executor = 'local'
     }

    // For execution on a SLURM scheduler with singularity
    slurmSingularity {

        process.executor = 'slurm'
        singularity.autoMounts = true
        singularity.enabled = true
        singularity.runOption = "--cleanenv"
        process.queue = queue

    }

    // For execution on a PBS scheduler, no containerization.
    pbs {
        process.executor = 'pbs'
        process.queue = queue
    }


    // For execution on a PBS scheduler with containerization.
    pbsDocker {

        process.executor = 'pbs'
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
  }

  // For execution on Azure Batch
  azurebatch {
        process.executor = 'azurebatch'
  }

  dnanexus {
     
  }

}

process {
    container = defaultImage
    cpus = 2
    memory = 8.GB
    time = 1000.h
    withLabel: R{
          container = rImage
    }
}

executor{
    exitStatusReadTimeoutMillis = 270000*50
}


